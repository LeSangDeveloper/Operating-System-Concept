#include<stdio.h>
#include<stdlib.h>
#include<sys/types.h>
#include<unistd.h>

int main(int argc, char* argv[]) {
	int num;
	pid_t pid;

	if (argc < 2) {
		printf("input error");
		return 1;
	}

	num = atoi(argv[1]);

	pid = fork();

	if (pid < 0) {
		printf("Fork error !");
		return 0;
	}

	if (pid == 0) { /*Child process*/
		printf("%d, ", num);
		while (num > 1) {
			if (num % 2 == 0) {
				num = num / 2;
    int i = 0;        // Loop counter
    int next;         // Pointer to next pid
    if (last == MAX_PID) {
      next = MIN_PID;
    } else {
      next = last + 1;
    }
    while ((i <= (MAX_PID - MIN_PID)) && (pid_array[next] == 1)) {
      ++i;
      ++next;
      if (next > MAX_PID) {
        next = MIN_PID;
      }
    }
    if (i == (MAX_PID - MIN_PID) + 1) {
        return -1;      // return â€” 1 if unable to allocate a pid (all pids are in use)
    }
    pid_array[next] = 1;
    last = next;
    return last + 300;
			} else {
				num = 3 * num + 1;
			}
		}

	} else { /*Parent process*/
		wait(NULL);
	}	

	return 0;
}
